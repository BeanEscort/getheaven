<?php

namespace App\Http\Livewire\Users;

use Livewire\WithPagination;
use Livewire\Component;

use App\Traits\GenericTrait;
use \App\Models\User; 


class UsersComponent extends Component
{
	use WithPagination;
	use GenericTrait;

	//properties
	public  $tipo ='Escolha',$name,$domain,$email,$orgao,$password;
	public  $selected_id, $search;   						
    public  $action = 1, $event=false;             						
    private $pagination = 5;         						
    public  $tipos, $user_id;
    
	public function mount()
	{
		$user_id = auth()->user()->id;

		$this->domain = auth()->user()->domain;
		$this->orgao = auth()->user()->orgao;		
	}

    public function render()
    {

    	if(strlen($this->search) > 0)
    	{    		
    		$info = User::where('name', 'like', '%' .  $this->search . '%')
    			->paginate($this->pagination);
    		
    	}
    	else {

    		$info = User::orderBy('id','desc')			
    		->paginate($this->pagination);
    		
		}
		
		return view('livewire.users.users-component', [
			'info' => $info,
		]);

    }

    //permite la búsqueda cuando se navega entre el paginado
    public function updatingSearch()
    {
    	$this->gotoPage(1);
    }

    //activa la vista edición o creación
    public function doAction($action)
    {
    	$this->resetInput();
    	$this->action = $action;

    }

	//método para reiniciar variables
    private function resetInput()
    {
    	$this->name = '';
    	$this->tipo = 'Escolha';    	
    	$this->email = '';    	
    	$this->password = '';    	
    	$this->selected_id = null;       
    	$this->action = 1;
    	$this->search = '';
        
    }

    //buscamos el registro seleccionado y asignamos la info a las propiedades
    public function edit($id)
    {
    	$record = User::findOrFail($id);
    	$this->selected_id = $id;
    	$this->name = $record->name;    	
    	$this->email = $record->email;
    	$this->tipo = $record->tipo;
    	$this->action = 2;

    }


    //método para registrar y/o actualizar registros
    public function StoreOrUpdate()
    {         	
		//$avatar = $this->storeAvatar();

    	$this->validate([
    		'name' => 'required',
    		'email'   => 'required|email',
    		'tipo'   => 'not_in:Escolha'
    	]);    	


    	if($this->selected_id <= 0) {  
			$this->validate([				
				'password'  => 'required',				
			]);      

    		$user =  User::create([
    			'name' => $this->name,            
    			'domain' => $this->domain,            
    			'orgao' => $this->orgao,            
    			'tipo' => $this->tipo,
    			'email' => $this->email,
				'password' => bcrypt($this->password),
				
			]);
			
    	}
    	else 
    	{
			
    		$user = User::find($this->selected_id);
    		$user->update([
    			'name' => $this->name,            
    			'domain' => $this->domain,            
    			'orgao' => $this->orgao,            
    			'tipo' => $this->tipo,
    			'email' => $this->email,							
				
			]);      

			if($this->password){
				$user->password = bcrypt($this->password);
				$user->save();
			}	              


		}

    	if($this->selected_id) 
    		 $this->emit('msgok', 'Usuario Atualizado');
    	else {    		
			 $this->emit('msgok', 'Atribua as FUNÇÕES de '.$this->tipo.' para este usuário.');
			 $this->emit('msgok', 'Usuario Criado');
		}
    	$this->resetInput();
	}
	
    //escuchar eventos y ejecutar acción solicitada
    protected $listeners = [
		'deleteRow'     => 'destroy',
		'avatarUpload' => 'handleFileUpload'        
	];  
	
	public function handleFileUpload($imageData)
	{	
		$this->event = true;
		$this->avatar = $imageData;		
	}


   //método para eliminar un registro dado
    public function destroy($id)
    {
    	if ($id) {
    		$record = User::where('id', $id);
    		$delete = $record->delete();

		if($delete){
			$this->emit('msgok', 'Usuário eliminado com êxito!');
		} else {
			$this->emit('', 'Não é possivel excluir categorieste usuário  xistem produtos relacionados a ela');
		}
    		$this->resetInput();
    	}

    }
  
}
